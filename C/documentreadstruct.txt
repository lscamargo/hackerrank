#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#define MAX_CHARACTERS 1005
#define MAX_PARAGRAPHS 5

struct word {
    char* data;
};

struct sentence {
    struct word* data;
    int word_count;//denotes number of words in a sentence
};

struct paragraph {
    struct sentence* data  ;
    int sentence_count;//denotes number of sentences in a paragraph
};

struct document {
    struct paragraph* data;
    int paragraph_count;//denotes number of paragraphs in a document
};

typedef struct word word;
typedef struct sentence sentence;
typedef struct paragraph paragraph;
typedef struct document document;

int countSeparator (char* str, char ch){
    int i=0, counter=0;
    while(str[i] != '\0'){
        if (str[i] == ch) counter++;
        i++;
    }
    return counter;
}

int countSeparatorStop (char* str, char separator, char stopChar){
    int i=0, counter=0;
    while(str[i] != '\0' && str[i] != stopChar){
        if (str[i] == separator) counter++;
        i++;
    }
    return counter;
}

int countWordLetters(char* str){
    int i=0;
    while(str[i] != '\0' && str[i] != ' ' && str[i] != '.' && str[i] != '\n'){
        i++;
    }
    return i;
}

void updateCursor (char** str){
    int i=0;
    while(str[0][i] != ' ' && str[0][i] != '.' && str[0][i] != '\n'){
        if(str[0][i] == '\0') {
            str[0] += i;
            return;
        }
        i++;
    }
    while(str[0][i] == ' ' || str[0][i] == '.' || str[0][i] == '\n' || str[0][i] == '\0'){
        if(str[0][i] == '\0'){
            str[0] += i;
            return;
        }
        i++;
    }
    str[0] += i;
    return;
}

void copyWord(char* dest, char* src){
    int i=0;
    while(src[i] != ' ' && src[i] != '.' && src[i] != '\n'){
        dest[i] = src[i];
        i++;
    }
    dest[i] = '\0';
}

document get_document(char* text) {
    int i=0;
    int paragraphCount, sentenceCount, wordCount, letterCount;
    
    paragraphCount = text? (countSeparator(text, '\n')) + 1: 0;
    //printf("Paragraph count = %d\n", paragraphCount);

    document doc;
    doc.data = (paragraph*) calloc(paragraphCount, sizeof(paragraph));
    doc.paragraph_count = paragraphCount;
    
    for(i=0;i<paragraphCount; i++){
        sentenceCount = countSeparatorStop(text, '.', '\n');
        //printf("    sentenceCount = %d\n", sentenceCount);
        
        doc.data[i].data = (sentence*) calloc(sentenceCount, sizeof(sentence));
        doc.data[i].sentence_count = sentenceCount;
        for(int j=0; j<sentenceCount; j++){
            wordCount = countSeparatorStop(text, ' ', '.') + 1;
            //printf("       wordCount = %d\n", wordCount);
            
            doc.data[i].data[j].data = (word*) calloc(wordCount, sizeof(word));
            doc.data[i].data[j].word_count = wordCount;
            for(int k=0; k<wordCount; k++){
                letterCount = countWordLetters(text);
                //printf("            letterCount = %d\n", letterCount);
                
                doc.data[i].data[j].data[k].data = (char*) calloc(letterCount + 1, sizeof(char));
                copyWord(doc.data[i].data[j].data[k].data, text);
                updateCursor(&text);
            }
        }
    }
    return doc;
}

word kth_word_in_mth_sentence_of_nth_paragraph(struct document Doc, int k, int m, int n) {
    return Doc.data[n-1].data[m-1].data[k-1];
}

sentence kth_sentence_in_mth_paragraph(struct document Doc, int k, int m) { 
    return Doc.data[m-1].data[k-1];
}

paragraph kth_paragraph(struct document Doc, int k) {
    return Doc.data[k-1];
}


void print_word(struct word w) {
    printf("%s", w.data);
}

void print_sentence(struct sentence sen) {
    for(int i = 0; i < sen.word_count; i++) {
        print_word(sen.data[i]);
        if (i != sen.word_count - 1) {
            printf(" ");
        }
    }
}

void print_paragraph(struct paragraph para) {
    for(int i = 0; i < para.sentence_count; i++){
        print_sentence(para.data[i]);
        printf(".");
    }
}

void print_document(struct document doc) {
    for(int i = 0; i < doc.paragraph_count; i++) {
        print_paragraph(doc.data[i]);
        if (i != doc.paragraph_count - 1)
            printf("\n");
    }
}

char* get_input_text() {	
    int paragraph_count;
    scanf("%d", &paragraph_count);

    char p[MAX_PARAGRAPHS][MAX_CHARACTERS], doc[MAX_CHARACTERS];
    memset(doc, 0, sizeof(doc));
    getchar();
    for (int i = 0; i < paragraph_count; i++) {
        scanf("%[^\n]%*c", p[i]);
        strcat(doc, p[i]);
        if (i != paragraph_count - 1)
            strcat(doc, "\n");
    }

    char* returnDoc = (char*)malloc((strlen (doc)+1) * (sizeof(char)));
    strcpy(returnDoc, doc);
    return returnDoc;
}

int main() 
{
    char* text = get_input_text();
    struct document Doc = get_document(text);

    int q;
    scanf("%d", &q);

    while (q--) {
        int type;
        scanf("%d", &type);

        if (type == 3){
            int k, m, n;
            scanf("%d %d %d", &k, &m, &n);
            struct word w = kth_word_in_mth_sentence_of_nth_paragraph(Doc, k, m, n);
            print_word(w);
        }

        else if (type == 2) {
            int k, m;
            scanf("%d %d", &k, &m);
            struct sentence sen= kth_sentence_in_mth_paragraph(Doc, k, m);
            print_sentence(sen);
        }

        else{
            int k;
            scanf("%d", &k);
            struct paragraph para = kth_paragraph(Doc, k);
            print_paragraph(para);
        }
        printf("\n");
    }     
}