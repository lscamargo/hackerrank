#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_STRING_LENGTH 6

struct package
{
	char* id;
	int weight;
};

typedef struct package package;

struct post_office
{
	int min_weight;
	int max_weight;
	package* packages;
	int packages_count;
};

typedef struct post_office post_office;

struct town
{
	char* name;
	post_office* offices;
	int offices_count;
};

typedef struct town town;

void print_all_packages(town t) {
    printf("%s:\n", t.name);
    for(int i=0; i<t.offices_count; i++){
        printf("\t%d:\n", i);
        for(int j=0; j<t.offices[i].packages_count; j++){
            printf("\t\t%s\n", t.offices[i].packages[j].id);
        }
    }
}

void append_package(town* town, int offices_index, package* pack){
    post_office* office = &town[0].offices[offices_index];
    
    office[0].packages_count++;
    office[0].packages = (package*) realloc(office[0].packages, office[0].packages_count*sizeof(package));
    office[0].packages[office[0].packages_count-1] = pack[0];
}

void remove_package(town*t, int offices_index, int packages_index){
    int packages_count = t[0].offices[offices_index].packages_count;
    if(packages_index < packages_count-1){
        for (int i=packages_index; i<packages_count-1; i++){
            t[0].offices[offices_index].packages[i] = t[0].offices[offices_index].packages[i+1];
        }
    }
    t[0].offices[offices_index].packages_count--;
    t[0].offices[offices_index].packages = (package*) realloc(t[0].offices[offices_index].packages, (packages_count-1)*sizeof(package));
}

void send_all_acceptable_packages(town* source, int source_office_index, town* target, int target_office_index) {
    //printf("Sending all packages\n");
    post_office* source_office = &source[0].offices[source_office_index];
    int packages_count = source_office[0].packages_count;
    
    post_office target_office = target[0].offices[target_office_index];
    int min_weight = target_office.min_weight;
    int max_weight = target_office.max_weight;
    //printf("Min = %d Max = %d\n", min_weight, max_weight);
    
    int weight;
    package* pack;
    
    for(int i=0; i<packages_count; i++){
        pack = &source_office[0].packages[i];
        weight = pack[0].weight;
        //printf("Looking at package %s %d: \n", pack[0].id, pack[0].weight);
        
        
        if(min_weight <= weight && weight <= max_weight){
            //printf("Sending package %s %d: \n", pack[0].id, pack[0].weight);
            append_package(target, target_office_index, pack);
            //printf("After appended:\n");
            //print_all_packages(*source);
            //print_all_packages(*target);
            remove_package(source, source_office_index, i);
            //printf("After removed:\n");
            //print_all_packages(*source);
            //print_all_packages(*target);
            i=0;
            packages_count--;
        }
    }
}

int count_town_packages(town t){
    int count = 0;
    for(int i=0; i< t.offices_count; i++){
        count += t.offices[i].packages_count;
    }
    return count;
}

town town_with_most_packages(town* towns, int towns_count) {
    town t;
    int max_package_count = 0, count = 0;
    for(int i=0; i<towns_count; i++){
        count = count_town_packages(towns[i]);
        if(count > max_package_count){
            max_package_count = count;
            t = towns[i];
        }
    }
    return t;
}

town* find_town(town* towns, int towns_count, char* name) {
    town* t;
    for(int i=0; i<towns_count; i++){
        if (strcmp(towns[i].name, name) == 0){
            t = &towns[i];
        }
    }
    return t;
}

int main()
{
	int towns_count;
	scanf("%d", &towns_count);
	town* towns = malloc(sizeof(town)*towns_count);
	for (int i = 0; i < towns_count; i++) {
		towns[i].name = malloc(sizeof(char) * MAX_STRING_LENGTH);
		scanf("%s", towns[i].name);
		scanf("%d", &towns[i].offices_count);
		towns[i].offices = malloc(sizeof(post_office)*towns[i].offices_count);
		for (int j = 0; j < towns[i].offices_count; j++) {
			scanf("%d%d%d", &towns[i].offices[j].packages_count, &towns[i].offices[j].min_weight, &towns[i].offices[j].max_weight);
			towns[i].offices[j].packages = malloc(sizeof(package)*towns[i].offices[j].packages_count);
			for (int k = 0; k < towns[i].offices[j].packages_count; k++) {
				towns[i].offices[j].packages[k].id = malloc(sizeof(char) * MAX_STRING_LENGTH);
				scanf("%s", towns[i].offices[j].packages[k].id);
				scanf("%d", &towns[i].offices[j].packages[k].weight);
			}
		}
	}
	int queries;
	scanf("%d", &queries);
	char town_name[MAX_STRING_LENGTH];
	while (queries--) {
		int type;
		scanf("%d", &type);
		switch (type) {
		case 1:
			scanf("%s", town_name);
			town* t = find_town(towns, towns_count, town_name);
			print_all_packages(*t);
			break;
		case 2:
			scanf("%s", town_name);
			town* source = find_town(towns, towns_count, town_name);
			int source_index;
			scanf("%d", &source_index);
			scanf("%s", town_name);
			town* target = find_town(towns, towns_count, town_name);
			int target_index;
			scanf("%d", &target_index);
			send_all_acceptable_packages(source, source_index, target, target_index);
			break;
		case 3:
			printf("Town with the most number of packages is %s\n", town_with_most_packages(towns, towns_count).name);
			break;
		}
	}
	return 0;
}
